// Generated by CoffeeScript 1.6.3
/*
    @author: Harsimran Singh Maan
    @date: August 09,2013
    @version:0.1
*/


(function() {
  "use strict";
  var addItem, appendRow, itemDone, listUpdated, login, loginFailure, loginSuccess, logout, removeItem, user;

  user = {
    name: "",
    list: [],
    isLoggedIn: function() {
      return name === "";
    },
    login: function(username, password, onSuccess, onFailure) {
      /* Ajax request*/

      return $.post("/login", {
        username: username,
        password: password
      }).success(function(data) {
        user.name = data.name;
        user.list = data.list;
        if (typeof onSuccess === "function" && data.name !== "") {
          onSuccess(data);
        }
        if (typeof onFailure === "function" && data.name === "") {
          return onFailure();
        }
      }).fail(function() {
        var list;
        user.name = "";
        list = [];
        if (typeof onFailure === "function") {
          return onFailure();
        }
      });
    },
    /* Logs out the user*/

    logout: function(callBack) {
      return $.post("/logout").success(function() {
        user.name = "";
        user.list = [];
        if (typeof callBack === "function") {
          return callBack();
        }
      }).fail(function() {
        user.name = "";
        user.list = [];
        if (typeof callBack === "function") {
          return callBack();
        }
      });
    },
    /* Updates the list on the client and the server*/

    updateList: function(newVal, callBack) {
      if (newVal) {
        if (!user.list) {
          user.list = [];
        }
        user.list.push({
          item: newVal,
          done: 0
        });
      } else {
        user.list = [];
        $(".item").each(function() {
          var isDone;
          if ($(this).hasClass("disabled")) {
            isDone = 1;
          } else {
            isDone = 0;
          }
          return user.list.push({
            item: $(this).text(),
            done: isDone
          });
        });
      }
      return $.post('/update', {
        list: JSON.stringify(user.list)
      }).success(function(data) {
        user.name = data.name;
        user.list = data.list;
        if (typeof callBack === "function") {
          return callBack(data);
        }
      }).fail(function() {
        return alert("An error occured while trying to update the list. Please retry after refresh.");
      });
    }
  };

  /* Adds new row to the dom*/


  appendRow = function(val, done) {
    /*Create elements on the fly*/

    var $deleteIcon, $doneIcon, $holder, $li;
    $li = $("<li></li>");
    $li.addClass('hide');
    $deleteIcon = $("<span></span>");
    $deleteIcon.addClass('icon delete');
    $doneIcon = $("<span></span>");
    $doneIcon.addClass('icon done');
    if (done === 1) {
      $doneIcon.addClass('disabled');
    }
    /* Bind events*/

    $deleteIcon.click(removeItem);
    $doneIcon.click(itemDone);
    $holder = $("<span></span>");
    $holder.addClass('item');
    if (done === 1) {
      $holder.addClass('disabled');
    }
    $holder.text(val);
    $li.append($deleteIcon).append($doneIcon).append($holder);
    /* animate the show*/

    return $li.appendTo($("ul")).show('slow');
  };

  /* Handles add button click*/


  addItem = function(event) {
    var val;
    val = $("#toDo").val().trim();
    if (val) {
      user.updateList(val, function(data) {
        /* Check if still logged In*/

        if (user.isLoggedIn()) {
          appendRow(val, "0");
          return $(".nothing").addClass('hide');
        } else {
          return logout();
        }
      });
    }
    $("#toDo").val('');
    event.preventDefault();
    return false;
  };

  /* Logout the user*/


  logout = function(event) {
    user.logout();
    $(".error").addClass("hide");
    /* THe page transition effect*/

    $(".tasks").effect('drop', {}, 500, function() {
      $(".login").effect('slide', {
        direction: 'right'
      }, 500);
      $("ul").empty();
      return $(".nothing").removeClass('hide');
    });
    event.preventDefault();
    return false;
  };

  /* Fired when the drag is stopped*/


  listUpdated = function() {
    return user.updateList(null, function() {
      if (!user.isLoggedIn()) {
        return logout();
      }
    });
  };

  /* Handle the login button click*/


  login = function(event) {
    user.login($("#username").val(), $("#password").val(), loginSuccess, loginFailure);
    event.preventDefault();
    return false;
  };

  /* Handle the list page display*/


  loginSuccess = function() {
    $(".error").addClass("hide");
    $(".name").text(user.name);
    if (user.list.length) {
      $(".nothing").addClass('hide');
    }
    $.each(user.list, function(index, value) {
      return appendRow(value.item, value.done);
    });
    return $(".login").effect('drop', {}, 500, function() {
      $(".tasks").effect('slide', {
        direction: 'right'
      }, 500);
      return $("input").each(function() {
        return this.value = '';
      });
    });
  };

  /* Handle login failure*/


  loginFailure = function() {
    return $(".login").effect('shake', function() {
      return $(".error").removeClass("hide");
    });
  };

  /* Remove the item*/


  removeItem = function() {
    var $this;
    $this = $(this);
    return $this.parent().effect('drop', function() {
      $this.parent().remove();
      if ($(".item").size() === 0) {
        $(".nothing").removeClass('hide');
      }
      return user.updateList(null, function() {
        if (!user.isLoggedIn()) {
          return logout();
        }
      });
    });
  };

  /* Mark an item as done*/


  itemDone = function() {
    if (!$(this).hasClass('disabled')) {
      $(this).next().addClass('disabled');
      $(this).addClass('disabled');
      return user.updateList(null, function() {
        if (!user.isLoggedIn()) {
          return logout();
        }
      });
    }
  };

  /* trim whitespace*/


  String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g, "");
  };

  /* Dom ready*/


  $(function() {
    /* Make the list sortable*/

    $("ul").sortable({
      update: listUpdated
    });
    /*Populate if list is sent from server*/

    $(".item").each(function() {
      var isDone;
      if ($(this).hasClass("disabled")) {
        isDone = 1;
      } else {
        isDone = 0;
      }
      return user.list.push({
        item: $(this).text(),
        done: isDone
      });
    });
    /* Bind events*/

    $("#btnAdd").click(addItem);
    $("#btnLogout").click(logout);
    $("#frmLogin").submit(login);
    $(".delete").click(removeItem);
    return $(".done").click(itemDone);
  });

}).call(this);
